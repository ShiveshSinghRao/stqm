--------------------------------------------------NEXTDATE---------------------------------------------
#include <iostream>
using namespace std;

string next_date(int day, int month, int year) {
    int days_in_month[] = {31, 28 + (year % 4 == 0 && (year % 100 != 0 || year % 400 == 0) ? 1 : 0), 31, 30, 31, 30, 31, 31, 30, 31, 30, 31};

    if (month < 1 || month > 12 || day < 1 || day > days_in_month[month - 1]) {
        return "Invalid date";
    }

    day++;
    if (day > days_in_month[month - 1]) {
        day = 1;
        month++;
        if (month > 12) {
            month = 1;
            year++;
        }
    }

    char buffer[11];
    sprintf(buffer, "%02d/%02d/%04d", day, month, year);
    return string(buffer);
}

int main() {
    int day, month, year;
    cout << "Enter a date (day month year): ";
    cin >> day >> month >> year;
    cout << "Next date is: " << next_date(day, month, year) << endl;
    return 0;
}

-------------------------------------COMMISSION----------------------------------------------------------
#include <iostream>
using namespace std;

double calculate_commission(int locks, int stocks, int barrels) {
    const int lock_price = 45;
    const int stock_price = 30;
    const int barrel_price = 25;
    
    if (locks < 1 || locks > 70 || stocks < 1 || stocks > 80 || barrels < 1 || barrels > 90) {
        cerr << "Invalid input" << endl;
        exit(1);
    }

    int total_sales = locks * lock_price + stocks * stock_price + barrels * barrel_price;
    double commission;

    if (total_sales <= 1000) {
        commission = total_sales * 0.10;
    } else if (total_sales <= 1800) {
        commission = 1000 * 0.10 + (total_sales - 1000) * 0.15;
    } else {
        commission = 1000 * 0.10 + 800 * 0.15 + (total_sales - 1800) * 0.20;
    }

    return commission;
}

int main() {
    int locks, stocks, barrels;
    cout << "Enter the number of locks, stocks, and barrels sold: ";
    cin >> locks >> stocks >> barrels;
    cout << "Commission: $" << calculate_commission(locks, stocks, barrels) << endl;
    return 0;
}

----------------------------------------LETTER GRADING----------------------------------------------------
#include <iostream>
#include <vector>
using namespace std;

int main() {
    vector<int> marks(6);
    cout << "Enter the marks for 6 subjects: ";
    int sum = 0;

    for (int i = 0; i < 6; ++i) {
        cin >> marks[i];
        sum += marks[i];
    }

    double total_percentage = sum / 6.0;
    string grade;

    if (0 < total_percentage && total_percentage <= 35)
        grade = "FAIL";
    else if (total_percentage <= 40)
        grade = "Grade C";
    else if (total_percentage <= 50)
        grade = "Grade C+";
    else if (total_percentage <= 60)
        grade = "Grade B";
    else if (total_percentage <= 70)
        grade = "Grade B+";
    else if (total_percentage <= 80)
        grade = "Grade A";
    else if (total_percentage <= 100)
        grade = "Grade A+";
    else
        grade = "Invalid marks";

    cout << "Total Percentage: " << total_percentage << "%, Grade: " << grade << endl;
    return 0;
}

------------------------------------BINARY---------------------------------------------
#include <iostream>
#include <vector>
using namespace std;

int binary_search(const vector<int>& arr, int key) {
    int low = 0;
    int high = arr.size() - 1;

    while (low <= high) {
        int mid = low + (high - low) / 2;
        if (arr[mid] == key) {
            return mid;  // Key found
        } else if (arr[mid] < key) {
            low = mid + 1;
        } else {
            high = mid - 1;
        }
    }

    return -1;  // Key not found
}

int main() {
    int n, key;
    cout << "Enter the number of elements: ";
    cin >> n;

    vector<int> arr(n);
    cout << "Enter " << n << " sorted elements: ";
    for (int i = 0; i < n; i++) {
        cin >> arr[i];
    }

    cout << "Enter the search key: ";
    cin >> key;

    int result = binary_search(arr, key);
    if (result != -1) {
        cout << "Element found at index " << result << endl;
    } else {
        cout << "Element not found in the array" << endl;
    }

    return 0;
}

--------------------------------------------TRIANGLE---------------------------------------------------
#include <iostream>
using namespace std;

string classify_triangle(int a, int b, int c) {
    if (a <= 0 || b <= 0 || c <= 0 || a > 10 || b > 10 || c > 10) {
        return "Invalid input";
    }

    if (a + b <= c || a + c <= b || b + c <= a) {
        return "Not a triangle";
    }

    if (a == b && b == c) {
        return "Equilateral triangle";
    } else if (a == b || b == c || a == c) {
        return "Isosceles triangle";
    } else {
        return "Scalene triangle";
    }
}

int main() {
    int a, b, c;
    cout << "Enter the sides of the triangle: ";
    cin >> a >> b >> c;
    cout << classify_triangle(a, b, c) << endl;
    return 0;
}